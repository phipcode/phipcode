```markdown
---
title: "Deploy Azure App Service using Bicep"
date: 2025-05-26
tags: ["azure", "bicep", "iac"]
---

## Introduction

Infrastructure as Code (IaC) has become an essential part of modern cloud deployments, facilitating the automation and management of cloud resources. Bicep is a domain-specific language (DSL) by Microsoft that simplifies the deployment of Azure resources, offering a cleaner syntax compared to traditional ARM templates. In this blog post, we will explore how to deploy an Azure App Service using Bicep.

## Prerequisites

Before we begin, ensure you have the following prerequisites:

1. An Azure account: If you donâ€™t have one, you can create a free account on the [Azure website](https://azure.microsoft.com/).
2. Azure CLI: Make sure you have the Azure CLI installed on your machine. You can download it from the [official documentation](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli).
3. Bicep CLI: Install Bicep by following the [official installation guide](https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/install).
4. A code editor: You can use any code editor of your choice, such as Visual Studio Code, which has excellent support for Bicep.

## Step-by-Step Guide

### Step 1: Set Up Azure Resource Group

First, it is a good practice to organize your resources into resource groups. You can create a new resource group using the Azure CLI with the following command:

```bash
az group create --name myResourceGroup --location eastus
```

### Step 2: Create Bicep File

Next, create a new file named `main.bicep`. This file will contain the Bicep code to deploy the Azure App Service.

### Step 3: Define the Azure App Service Plan and Web App

In the `main.bicep` file, define the Azure App Service Plan and the Azure Web App. Below is a basic example to get you started:

## Code Example

```bicep
param appName string
param location string = resourceGroup().location
param skuName string = 'F1'

resource appServicePlan 'Microsoft.Web/serverfarms@2021-02-01' = {
  name: '${appName}-asp'
  location: location
  sku: {
    name: skuName
    tier: 'Free'
    capacity: 1
  }
}

resource webApp 'Microsoft.Web/sites@2021-02-01' = {
  name: appName
  location: location
  kind: 'app'
  properties: {
    serverFarmId: appServicePlan.id
  }
}

output webAppUrl string = webApp.defaultHostName
```

### Step 4: Deploy the Bicep Template

To deploy your Bicep template, run the following command in your terminal:

```bash
az deployment group create --resource-group myResourceGroup --template-file main.bicep --parameters appName=myUniqueWebAppName
```

Make sure to replace `myUniqueWebAppName` with a unique name for your Azure Web App, as this will become the subdomain for your app.

### Step 5: Verify Deployment

You can verify the deployment by checking the Azure Portal or by using the Azure CLI:

```bash
az webapp show --name myUniqueWebAppName --resource-group myResourceGroup
```

## Troubleshooting

If you encounter any issues during deployment, consider the following troubleshooting steps:

- Check for naming conflicts: Ensure that your App Service name is globally unique across Azure.
- Validate your Bicep file syntax: You can use the Bicep CLI to validate your files:
  ```bash
  bicep build main.bicep
  ```
- Review deployment errors: Use the Azure portal or CLI to check detailed error messages in the "Deployments" section of your resource group.

## Summary

In this post, we've walked through the process of deploying an Azure App Service using Bicep. Bicep simplifies the deployment process while enhancing readability and maintainability of your infrastructure code. Whether you are a beginner or an experienced Azure user, adopting Bicep can significantly improve your deployment workflows.

Feel free to reach out if you have any questions or need further assistance with Bicep or Azure deployments!
```